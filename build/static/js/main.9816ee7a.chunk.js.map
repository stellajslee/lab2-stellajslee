{"version":3,"sources":["App.js","index.js"],"names":["App","state","rows","columns","moves","playerTurn","count","resetBoard","setState","winner","getPiece","x","y","filter","item","getWinningMoves","xPosition","yPosition","xVelocity","yVelocity","winningMoves","player","delta","checkX","checkY","checkPiece","push","checkForWin","velocities","index","length","element","addMove","nextPlayerTurn","availableYPosition","position","concat","this","rowViews","row","columnViews","column","piece","className","onClick","style","backgroundColor","disabled","undefined","renderBoard","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9816ee7a.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n    // states of rows and columns; starting with red\n    state = {\n        rows: 6,\n        columns: 7,\n        moves: [],\n        playerTurn: \"red\",\n        count: 0\n    };\n\n    // resetting board to empty\n    resetBoard = () => {\n        this.setState({ moves: [], winner: null, count: 0});\n    }\n\n    // get moves with particular row and column\n    getPiece = (x, y) => {\n        const list = this.state.moves.filter((item) => {\n            return (item.x === x && item.y === y);\n        });\n\n        return list [0];\n    }\n\n    // getting winning moves using velocity\n    getWinningMoves = (xPosition, yPosition, xVelocity, yVelocity) => {\n        // to store winning moves\n        const winningMoves = [{x: xPosition, y: yPosition}];\n        // to get the player with the winning moves\n        const player = this.getPiece(xPosition, yPosition).player;\n\n        // checking delta in forward direction\n        for (let delta = 1; delta <= 3; delta += 1) {\n            const checkX = xPosition + xVelocity * delta;\n            const checkY = yPosition + yVelocity * delta;\n\n            const checkPiece = this.getPiece(checkX, checkY);\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({ x: checkX, y: checkY })\n            } else {\n                break;\n            }\n        }\n\n        // checking delta in reverse direction\n        for (let delta = -1; delta >= -3; delta -= 1) {\n            const checkX = xPosition + xVelocity * delta;\n            const checkY = yPosition + yVelocity * delta;\n\n            const checkPiece = this.getPiece(checkX, checkY);\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({ x: checkX, y: checkY })\n            } else {\n                break;\n            }\n        }\n\n        return winningMoves;\n    }\n\n    // sets the state to have a winner if there is one\n    checkForWin = (x, y) => {\n        // to check horizontal moves, we set xPosition and yPosition to current position & xVelocity to 1 and yVelocity to 0\n        // to check vertical moves, we set xPosition and yPosition to current position & xVelocity to 0 and yVelocity to 1\n        // to check forward diagonal moves, we set xPosition and yPosition to current position & xVelocity to 1 and yVelocity to 1\n        // to check reverse diagonal moves, we set xPosition and yPosition to current position & xVelocity to -1 and yVelocity to 1\n        const velocities = [{x: 1, y: 0}, {x:0, y: 1}, {x:-1, y:1}, {x:1 , y:1}];\n\n        // iterating all the directions we have to check\n        for (let index = 0; index < velocities.length; index++) {\n            const element = velocities[index];\n            const winningMoves = this.getWinningMoves(x, y, element.x, element.y);\n            if (winningMoves.length > 3) {\n                this.setState({ winner: this.getPiece(x,y).player, winningMoves })\n            }\n        }\n    }\n\n    // adding a new move into the state and changing the player turn to the next player\n    addMove = (x, y) => {\n        const { playerTurn } = this.state;\n        const nextPlayerTurn = playerTurn === \"red\" ? \"yellow\" : \"red\";\n\n        // making the piece go the lowest row\n        let availableYPosition = null;\n        for (let position = this.state.rows - 1; position >= 0; position--) {\n            if (!this.getPiece(x, position)) {\n                availableYPosition = position;\n                break;\n            }\n        }\n        if (availableYPosition !== null) {\n            this.setState({moves: this.state.moves.concat({x, y: availableYPosition, player: playerTurn}), playerTurn: nextPlayerTurn, count:++this.state.count}, () => this.checkForWin(x, availableYPosition, playerTurn))\n        }\n    }\n\n    // render a square board\n    renderBoard() {\n        // get number of rows and columns from state\n        const { winner } = this.state;\n        const rowViews = [];\n\n        // create rows and columns for the board\n        for (let row = 0; row < this.state.rows; row += 1) {\n            const columnViews = [];\n            for (let column = 0; column < this.state.columns; column += 1) {\n                const piece = this.getPiece(column, row);\n\n                columnViews.push(<div className=\"column\">\n                    {/* circular buttons that players will be pressing */}\n                    <div onClick={() => {this.addMove(column, row,)}} className=\"bu\">\n                        {/* if there is piece associated with that coordinate, change colour red/yellow if not undefined */}\n                        {piece ? <button className=\"bu-selected\" style={{backgroundColor: piece.player}} disabled={true}/>: undefined}\n                    </div>\n                </div>);\n            }\n            rowViews.push(\n                <div className=\"row\">{columnViews}</div>\n            );\n        }\n\n        return (\n            <div className=\"board\">\n                {/* restart game if winner announcement is clicked */}\n                {winner && <div onClick={this.resetBoard} className=\"winner\">{winner} wins! click here to restart</div>}\n                {/* if all 42 buttons are changed into a colour then the game is over */}\n                {this.state.count === 42 && <div onClick={this.resetBoard} className=\"winner\">board is full! click here to restart</div>}\n\n                {rowViews}\n            </div>\n        )\n    }\n\n    // rendering the board\n    render() {\n        return (\n            <>\n                <div className=\"container\">\n                    <header className=\"header\">CONNECT 4 GAME!</header>\n                    <div>\n                        {this.renderBoard()}\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}