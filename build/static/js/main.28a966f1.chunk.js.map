{"version":3,"sources":["App.js","index.js"],"names":["App","state","rows","columns","moves","playerTurn","count","resetBoard","setState","winner","getPiece","x","y","filter","item","checkForWin","player","winningMoves","column","checkPiece","push","length","row","addMove","nextPlayerTurn","concat","this","rowViews","columnViews","piece","className","onClick","style","backgroundColor","disabled","undefined","renderBoard","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAGMA,E,4MAEFC,MAAQ,CACJC,KAAM,EACNC,QAAS,EACTC,MAAO,GACPC,WAAY,MACZC,MAAO,G,EAIXC,WAAa,WACT,EAAKC,SAAS,CAAEJ,MAAO,GAAIK,OAAQ,KAAMH,MAAO,K,EAIpDI,SAAW,SAACC,EAAGC,GAKX,OAJa,EAAKX,MAAMG,MAAMS,QAAO,SAACC,GAClC,OAAQA,EAAKH,IAAMA,GAAKG,EAAKF,IAAMA,KAG1B,I,EAIjBG,YAAc,SAACJ,EAAGC,EAAGI,GAKjB,IAHA,IAAIC,EAAe,CAAC,CAACN,IAAGC,MAGfM,EAASP,EAAI,EAAGO,EAASP,EAAI,EAAGO,GAAU,EAAG,CAClD,IAAMC,EAAa,EAAKT,SAASQ,EAAQN,GAEzC,IAAIO,GAAcA,EAAWH,SAAWA,EAGpC,MAFAC,EAAaG,KAAK,CAAET,EAAGO,EAAQN,EAAGA,IAK1C,IAAK,IAAIM,EAASP,EAAI,EAAGO,EAASP,EAAI,EAAGO,GAAU,EAAG,CAClD,IAAMC,EAAa,EAAKT,SAASQ,EAAQN,GAEzC,IAAIO,GAAcA,EAAWH,SAAWA,EAGpC,MAFAC,EAAaG,KAAK,CAAET,EAAGO,EAAQN,EAAGA,IAK1C,GAAIK,EAAaI,OAAS,EAEtB,OADA,EAAKb,SAAS,CAACC,OAAQO,EAAQC,kBACxB,EAIXA,EAAe,CAAC,CAACN,IAAGC,MACpB,IAAK,IAAIU,EAAMV,EAAI,EAAGU,EAAMV,EAAI,EAAGU,GAAO,EAAG,CACzC,IAAMH,EAAa,EAAKT,SAASC,EAAGW,GAEpC,IAAIH,GAAcA,EAAWH,SAAWA,EAGpC,MAFAC,EAAaG,KAAK,CAACT,EAAGA,EAAGC,EAAGU,IAKpC,IAAK,IAAIA,EAAMV,EAAI,EAAGU,EAAMV,EAAI,EAAGU,GAAO,EAAG,CACzC,IAAMH,EAAa,EAAKT,SAASC,EAAGW,GAEpC,IAAIH,GAAcA,EAAWH,SAAWA,EAGpC,MAFAC,EAAaG,KAAK,CAACT,EAAGA,EAAGC,EAAGU,IAKpC,OAAIL,EAAaI,OAAS,GACtB,EAAKb,SAAS,CAACC,OAAQO,EAAQC,kBACxB,QAFX,G,EAOJM,QAAU,SAACZ,EAAGC,GACV,IAAQP,EAAe,EAAKJ,MAApBI,WACFmB,EAAgC,QAAfnB,EAAuB,SAAW,MAIzD,EAAKG,SAAS,CAACJ,MAAO,EAAKH,MAAMG,MAAMqB,OAAO,CAACd,IAAGC,IAAGI,OAAQX,IAAcA,WAAYmB,EAAgBlB,QAAQ,EAAKL,MAAMK,QAAQ,kBAAM,EAAKS,YAAYJ,EAAGC,EAAGP,O,iDAInK,WAMI,IANW,IAAD,OAEFI,EAAWiB,KAAKzB,MAAhBQ,OACFkB,EAAW,GAHP,WAMDL,GAEL,IADA,IAAMM,EAAc,GAPd,WAQGV,GACL,IAAMW,EAAQ,EAAKnB,SAASQ,EAAQI,GAEpCM,EAAYR,KAAK,qBAAKU,UAAU,SAAf,SAEb,qBAAKC,QAAS,WAAO,EAAKR,QAAQL,EAAQI,IAAQQ,UAAU,KAA5D,SAEKD,EAAQ,wBAAQC,UAAU,cAAcE,MAAO,CAACC,gBAAiBJ,EAAMb,QAASkB,UAAU,SAASC,QAPvGjB,EAAS,EAAGA,EAAS,EAAKjB,MAAME,QAASe,GAAU,EAAI,EAAvDA,GAWTS,EAASP,KACL,qBAAKU,UAAU,MAAf,SAAsBF,MAdrBN,EAAM,EAAGA,EAAMI,KAAKzB,MAAMC,KAAMoB,GAAO,EAAI,EAA3CA,GAkBT,OACI,sBAAKQ,UAAU,QAAf,UAEKrB,GAAU,sBAAKsB,QAASL,KAAKnB,WAAYuB,UAAU,SAAzC,UAAmDrB,EAAnD,kCAEW,KAArBiB,KAAKzB,MAAMK,OAAgB,qBAAKyB,QAASL,KAAKnB,WAAYuB,UAAU,SAAzC,kDAE3BH,O,oBAMb,WACI,OACI,mCACI,sBAAKG,UAAU,YAAf,UACI,wBAAQA,UAAU,SAAlB,6BACA,8BACKJ,KAAKU,yB,GArIZC,aA6IHrC,IC3IfsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.28a966f1.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n    // states of rows and columns; starting with red\n    state = {\n        rows: 6,\n        columns: 7,\n        moves: [],\n        playerTurn: \"red\",\n        count: 0\n    };\n\n    // resetting board to empty\n    resetBoard = () => {\n        this.setState({ moves: [], winner: null, count: 0});\n    }\n\n    // get moves with particular row and column\n    getPiece = (x, y) => {\n        const list = this.state.moves.filter((item) => {\n            return (item.x === x && item.y === y);\n        });\n\n        return list [0];\n    }\n\n    // sets the state to have a winner if there is one\n    checkForWin = (x, y, player) => {\n\n        let winningMoves = [{x, y}];\n\n        // check horizontal\n        for (let column = x + 1; column < x + 4; column += 1) {\n            const checkPiece = this.getPiece(column, y);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({ x: column, y: y })\n            } else {\n                break;\n            }\n        }\n        for (let column = x - 1; column > x - 4; column -= 1) {\n            const checkPiece = this.getPiece(column, y);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({ x: column, y: y })\n            } else {\n                break;\n            }\n        }\n        if (winningMoves.length > 3) {\n            this.setState({winner: player, winningMoves})\n            return true;\n        }\n\n        // check vertical\n        winningMoves = [{x, y}];\n        for (let row = y + 1; row < y + 4; row += 1) {\n            const checkPiece = this.getPiece(x, row);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({x: x, y: row })\n            } else {\n                break;\n            }\n        }\n        for (let row = y - 1; row > y - 4; row -= 1) {\n            const checkPiece = this.getPiece(x, row);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({x: x, y: row })\n            } else {\n                break;\n            }\n        }\n        if (winningMoves.length > 3) {\n            this.setState({winner: player, winningMoves})\n            return true;\n        }\n    }\n\n    // adding a new move into the state and changing the player turn to the next player\n    addMove = (x, y) => {\n        const { playerTurn } = this.state;\n        const nextPlayerTurn = playerTurn === \"red\" ? \"yellow\" : \"red\";\n\n        // check for a win based on this next move\n        // start from center and check how many pieces are on left, right; four in a row means a win\n        this.setState({moves: this.state.moves.concat({x, y, player: playerTurn}), playerTurn: nextPlayerTurn, count:++this.state.count}, () => this.checkForWin(x, y, playerTurn))\n    }\n\n    // render a square board\n    renderBoard() {\n        // get number of rows and columns from state\n        const { winner } = this.state;\n        const rowViews = [];\n\n        // create rows and columns for the board\n        for (let row = 0; row < this.state.rows; row += 1) {\n            const columnViews = [];\n            for (let column = 0; column < this.state.columns; column += 1) {\n                const piece = this.getPiece(column, row);\n\n                columnViews.push(<div className=\"column\">\n                    {/* circular buttons that players will be pressing */}\n                    <div onClick={() => {this.addMove(column, row,)}} className=\"bu\">\n                        {/* if there is piece associated with that coordinate, change colour red/yellow if not undefined */}\n                        {piece ? <button className=\"bu-selected\" style={{backgroundColor: piece.player}} disabled={true}/>: undefined}\n                    </div>\n                </div>);\n            }\n            rowViews.push(\n                <div className=\"row\">{columnViews}</div>\n            );\n        }\n\n        return (\n            <div className=\"board\">\n                {/* restart game if winner announcement is clicked */}\n                {winner && <div onClick={this.resetBoard} className=\"winner\">{winner} wins! click here to restart</div>}\n                {/* if all 42 buttons are changed into a colour then the game is over */}\n                {this.state.count === 42 && <div onClick={this.resetBoard} className=\"winner\">board is full! click here to restart</div>}\n\n                {rowViews}\n            </div>\n        )\n    }\n\n    // rendering the board\n    render() {\n        return (\n            <>\n                <div className=\"container\">\n                    <header className=\"header\">CONNECT 4 GAME!</header>\n                    <div>\n                        {this.renderBoard()}\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}