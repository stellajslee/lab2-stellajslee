{"ast":null,"code":"var _jsxFileName = \"/Users/stellalee/lab2-stellajslee/src/App.js\";\nimport './App.css';\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows: 6,\n      columns: 7,\n      moves: [],\n      playerTurn: \"red\",\n      count: 0\n    };\n\n    this.resetBoard = () => {\n      this.setState({\n        moves: [],\n        winner: null,\n        count: 0\n      });\n    };\n\n    this.getPiece = (x, y) => {\n      const list = this.state.moves.filter(item => {\n        return item.x === x && item.y === y;\n      });\n      return list[0];\n    };\n\n    this.getWinningMoves = (xPosition, yPosition, xVelocity, yVelocity) => {\n      const winningMoves = [{\n        x: xPosition,\n        y: yPosition\n      }];\n      const player = this.getPiece(xPosition, yPosition).player; // forward direction\n\n      for (let delta = 1; delta <= 3; delta += 1) {\n        const checkX = xPosition + xVelocity * delta;\n        const checkY = yPosition + yVelocity * delta;\n        const checkPiece = this.getPiece(checkX, checkY);\n\n        if (checkPiece && checkPiece.player === player) {\n          winningMoves.push({\n            x: checkX,\n            y: checkY\n          });\n        } else {\n          break;\n        }\n      } // reverse direction\n\n\n      for (let delta = -1; delta >= -3; delta -= 1) {\n        const checkX = xPosition + xVelocity * delta;\n        const checkY = yPosition + yVelocity * delta;\n        const checkPiece = this.getPiece(checkX, checkY);\n\n        if (checkPiece && checkPiece.player === player) {\n          winningMoves.push({\n            x: checkX,\n            y: checkY\n          });\n        } else {\n          break;\n        }\n      }\n\n      return winningMoves;\n    };\n\n    this.checkForWin = (x, y) => {\n      // all the directions we have to check\n      const velocities = [{\n        x: 1,\n        y: 0\n      }, {\n        x: 0,\n        y: 1\n      }, {\n        x: -1,\n        y: 1\n      }, {\n        x: 1,\n        y: 1\n      }];\n\n      for (let index = 0; index < velocities.length; index++) {\n        const element = velocities[index];\n        const winningMoves = this.getWinningMoves(x, y, element.x, element.y);\n\n        if (winningMoves.length > 3) {\n          this.setState({\n            winner: this.getPiece(x, y).player,\n            winningMoves\n          });\n        }\n      }\n    };\n\n    this.addMove = (x, y) => {\n      const {\n        playerTurn\n      } = this.state;\n      const nextPlayerTurn = playerTurn === \"red\" ? \"yellow\" : \"red\"; // check for a win based on this next move\n      // start from center and check how many pieces are on left, right; four in a row means a win\n\n      this.setState({\n        moves: this.state.moves.concat({\n          x,\n          y,\n          player: playerTurn\n        }),\n        playerTurn: nextPlayerTurn,\n        count: ++this.state.count\n      }, () => this.checkForWin(x, y, playerTurn));\n    };\n  }\n\n  // render a square board\n  renderBoard() {\n    // get number of rows and columns from state\n    const {\n      winner\n    } = this.state;\n    const rowViews = []; // create rows and columns for the board\n\n    for (let row = 0; row < this.state.rows; row += 1) {\n      const columnViews = [];\n\n      for (let column = 0; column < this.state.columns; column += 1) {\n        const piece = this.getPiece(column, row);\n        columnViews.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => {\n              this.addMove(column, row);\n            },\n            className: \"bu\",\n            children: piece ? /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bu-selected\",\n              style: {\n                backgroundColor: piece.player\n              },\n              disabled: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 34\n            }, this) : undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 34\n        }, this));\n      }\n\n      rowViews.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: columnViews\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [winner && /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: this.resetBoard,\n        className: \"winner\",\n        children: [winner, \" wins! click here to restart\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 28\n      }, this), this.state.count === 42 && /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: this.resetBoard,\n        className: \"winner\",\n        children: \"board is full! click here to restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 45\n      }, this), rowViews]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this);\n  } // rendering the board\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"header\",\n          children: \"CONNECT 4 GAME!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.renderBoard()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stellalee/lab2-stellajslee/src/App.js"],"names":["React","Component","App","state","rows","columns","moves","playerTurn","count","resetBoard","setState","winner","getPiece","x","y","list","filter","item","getWinningMoves","xPosition","yPosition","xVelocity","yVelocity","winningMoves","player","delta","checkX","checkY","checkPiece","push","checkForWin","velocities","index","length","element","addMove","nextPlayerTurn","concat","renderBoard","rowViews","row","columnViews","column","piece","backgroundColor","undefined","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n    // states of rows and columns; starting with red\n    state = {\n        rows: 6,\n        columns: 7,\n        moves: [],\n        playerTurn: \"red\",\n        count: 0\n    };\n\n    // resetting board to empty\n    resetBoard = () => {\n        this.setState({ moves: [], winner: null, count: 0});\n    }\n\n    // get moves with particular row and column\n    getPiece = (x, y) => {\n        const list = this.state.moves.filter((item) => {\n            return (item.x === x && item.y === y);\n        });\n\n        return list [0];\n    }\n\n    getWinningMoves = (xPosition, yPosition, xVelocity, yVelocity) => {\n        const winningMoves = [{x: xPosition, y: yPosition}];\n        const player = this.getPiece(xPosition, yPosition).player;\n\n        // forward direction\n        for (let delta = 1; delta <= 3; delta += 1) {\n            const checkX = xPosition + xVelocity * delta;\n            const checkY = yPosition + yVelocity * delta;\n\n            const checkPiece = this.getPiece(checkX, checkY);\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({ x: checkX, y: checkY })\n            } else {\n                break;\n            }\n        }\n\n        // reverse direction\n        for (let delta = -1; delta >= -3; delta -= 1) {\n            const checkX = xPosition + xVelocity * delta;\n            const checkY = yPosition + yVelocity * delta;\n\n            const checkPiece = this.getPiece(checkX, checkY);\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({ x: checkX, y: checkY })\n            } else {\n                break;\n            }\n        }\n\n        return winningMoves;\n    }\n\n    // sets the state to have a winner if there is one\n    checkForWin = (x, y) => {\n        // all the directions we have to check\n        const velocities = [{x: 1, y: 0}, {x:0, y: 1}, {x:-1, y:1}, {x:1 , y:1}];\n        for (let index = 0; index < velocities.length; index++) {\n            const element = velocities[index];\n            const winningMoves = this.getWinningMoves(x, y, element.x, element.y);\n            if (winningMoves.length > 3) {\n                this.setState({ winner: this.getPiece(x,y).player, winningMoves })\n            }\n        }\n    }\n\n    // adding a new move into the state and changing the player turn to the next player\n    addMove = (x, y) => {\n        const { playerTurn } = this.state;\n        const nextPlayerTurn = playerTurn === \"red\" ? \"yellow\" : \"red\";\n\n        // check for a win based on this next move\n        // start from center and check how many pieces are on left, right; four in a row means a win\n        this.setState({moves: this.state.moves.concat({x, y, player: playerTurn}), playerTurn: nextPlayerTurn, count:++this.state.count}, () => this.checkForWin(x, y, playerTurn))\n    }\n\n    // render a square board\n    renderBoard() {\n        // get number of rows and columns from state\n        const { winner } = this.state;\n        const rowViews = [];\n\n        // create rows and columns for the board\n        for (let row = 0; row < this.state.rows; row += 1) {\n            const columnViews = [];\n            for (let column = 0; column < this.state.columns; column += 1) {\n                const piece = this.getPiece(column, row);\n\n                columnViews.push(<div className=\"column\">\n                    {/* circular buttons that players will be pressing */}\n                    <div onClick={() => {this.addMove(column, row,)}} className=\"bu\">\n                        {/* if there is piece associated with that coordinate, change colour red/yellow if not undefined */}\n                        {piece ? <button className=\"bu-selected\" style={{backgroundColor: piece.player}} disabled={true}/>: undefined}\n                    </div>\n                </div>);\n            }\n            rowViews.push(\n                <div className=\"row\">{columnViews}</div>\n            );\n        }\n\n        return (\n            <div className=\"board\">\n                {/* restart game if winner announcement is clicked */}\n                {winner && <div onClick={this.resetBoard} className=\"winner\">{winner} wins! click here to restart</div>}\n                {/* if all 42 buttons are changed into a colour then the game is over */}\n                {this.state.count === 42 && <div onClick={this.resetBoard} className=\"winner\">board is full! click here to restart</div>}\n\n                {rowViews}\n            </div>\n        )\n    }\n\n    // rendering the board\n    render() {\n        return (\n            <>\n                <div className=\"container\">\n                    <header className=\"header\">CONNECT 4 GAME!</header>\n                    <div>\n                        {this.renderBoard()}\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}