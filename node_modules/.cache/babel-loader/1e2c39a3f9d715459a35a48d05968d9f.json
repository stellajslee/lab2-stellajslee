{"ast":null,"code":"import _classCallCheck from\"/Users/stellalee/lab2-stellajslee/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/stellalee/lab2-stellajslee/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/stellalee/lab2-stellajslee/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stellalee/lab2-stellajslee/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import'./App.css';import React,{Component}from\"react\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={rows:6,columns:7,moves:[],playerTurn:\"red\",count:0};_this.resetBoard=function(){_this.setState({moves:[],winner:null,count:0});};_this.getPiece=function(x,y){var list=_this.state.moves.filter(function(item){return item.x===x&&item.y===y;});return list[0];};_this.getWinningMoves=function(xPosition,yPosition,xVelocity,yVelocity){// to store winning moves\nvar winningMoves=[{x:xPosition,y:yPosition}];// to get the player with the winning moves\nvar player=_this.getPiece(xPosition,yPosition).player;// checking delta in forward direction\nfor(var delta=1;delta<=3;delta+=1){var checkX=xPosition+xVelocity*delta;var checkY=yPosition+yVelocity*delta;var checkPiece=_this.getPiece(checkX,checkY);if(checkPiece&&checkPiece.player===player){winningMoves.push({x:checkX,y:checkY});}else{break;}}// checking delta in reverse direction\nfor(var _delta=-1;_delta>=-3;_delta-=1){var _checkX=xPosition+xVelocity*_delta;var _checkY=yPosition+yVelocity*_delta;var _checkPiece=_this.getPiece(_checkX,_checkY);if(_checkPiece&&_checkPiece.player===player){winningMoves.push({x:_checkX,y:_checkY});}else{break;}}return winningMoves;};_this.checkForWin=function(x,y){// to check horizontal moves, we set xPosition and yPosition to current position & xVelocity to 1 and yVelocity to 0\n// to check vertical moves, we set xPosition and yPosition to current position & xVelocity to 0 and yVelocity to 1\n// to check forward diagonal moves, we set xPosition and yPosition to current position & xVelocity to 1 and yVelocity to 1\n// to check reverse diagonal moves, we set xPosition and yPosition to current position & xVelocity to -1 and yVelocity to 1\nvar velocities=[{x:1,y:0},{x:0,y:1},{x:-1,y:1},{x:1,y:1}];// iterating all the directions we have to check\nfor(var index=0;index<velocities.length;index++){var element=velocities[index];var winningMoves=_this.getWinningMoves(x,y,element.x,element.y);if(winningMoves.length>3){_this.setState({winner:_this.getPiece(x,y).player,winningMoves:winningMoves});}}};_this.addMove=function(x,y){var playerTurn=_this.state.playerTurn;var nextPlayerTurn=playerTurn===\"red\"?\"yellow\":\"red\";// making the piece go the lowest row\nvar availableYPosition=null;for(var position=_this.state.rows-1;position>=0;position--){if(!_this.getPiece(x,position)){availableYPosition=position;break;}}if(availableYPosition!==null){_this.setState({moves:_this.state.moves.concat({x:x,y:availableYPosition,player:playerTurn}),playerTurn:nextPlayerTurn,count:++_this.state.count},function(){return _this.checkForWin(x,availableYPosition,playerTurn);});}};return _this;}_createClass(App,[{key:\"renderBoard\",value:// render a square board\nfunction renderBoard(){var _this2=this;// get number of rows and columns from state\nvar winner=this.state.winner;var rowViews=[];// create rows and columns for the board\nvar _loop=function _loop(row){var columnViews=[];var _loop2=function _loop2(column){var piece=_this2.getPiece(column,row);columnViews.push(/*#__PURE__*/_jsx(\"div\",{className:\"column\",children:/*#__PURE__*/_jsx(\"div\",{onClick:function onClick(){_this2.addMove(column,row);},className:\"bu\",children:piece?/*#__PURE__*/_jsx(\"button\",{className:\"bu-selected\",style:{backgroundColor:piece.player},disabled:true}):undefined})}));};for(var column=0;column<_this2.state.columns;column+=1){_loop2(column);}rowViews.push(/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:columnViews}));};for(var row=0;row<this.state.rows;row+=1){_loop(row);}return/*#__PURE__*/_jsxs(\"div\",{className:\"board\",children:[winner&&/*#__PURE__*/_jsxs(\"div\",{onClick:this.resetBoard,className:\"winner\",children:[winner,\" wins! click here to restart\"]}),this.state.count===42&&/*#__PURE__*/_jsx(\"div\",{onClick:this.resetBoard,className:\"winner\",children:\"board is full! click here to restart\"}),rowViews]});}// rendering the board\n},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"header\",children:\"CONNECT 4 GAME!\"}),/*#__PURE__*/_jsx(\"div\",{children:this.renderBoard()})]})});}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/stellalee/lab2-stellajslee/src/App.js"],"names":["React","Component","App","state","rows","columns","moves","playerTurn","count","resetBoard","setState","winner","getPiece","x","y","list","filter","item","getWinningMoves","xPosition","yPosition","xVelocity","yVelocity","winningMoves","player","delta","checkX","checkY","checkPiece","push","checkForWin","velocities","index","length","element","addMove","nextPlayerTurn","availableYPosition","position","concat","rowViews","row","columnViews","column","piece","backgroundColor","undefined","renderBoard"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n    // states of rows and columns; starting with red\n    state = {\n        rows: 6,\n        columns: 7,\n        moves: [],\n        playerTurn: \"red\",\n        count: 0\n    };\n\n    // resetting board to empty\n    resetBoard = () => {\n        this.setState({ moves: [], winner: null, count: 0});\n    }\n\n    // get moves with particular row and column\n    getPiece = (x, y) => {\n        const list = this.state.moves.filter((item) => {\n            return (item.x === x && item.y === y);\n        });\n\n        return list [0];\n    }\n\n    // getting winning moves using velocity\n    getWinningMoves = (xPosition, yPosition, xVelocity, yVelocity) => {\n        // to store winning moves\n        const winningMoves = [{x: xPosition, y: yPosition}];\n        // to get the player with the winning moves\n        const player = this.getPiece(xPosition, yPosition).player;\n\n        // checking delta in forward direction\n        for (let delta = 1; delta <= 3; delta += 1) {\n            const checkX = xPosition + xVelocity * delta;\n            const checkY = yPosition + yVelocity * delta;\n\n            const checkPiece = this.getPiece(checkX, checkY);\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({ x: checkX, y: checkY })\n            } else {\n                break;\n            }\n        }\n\n        // checking delta in reverse direction\n        for (let delta = -1; delta >= -3; delta -= 1) {\n            const checkX = xPosition + xVelocity * delta;\n            const checkY = yPosition + yVelocity * delta;\n\n            const checkPiece = this.getPiece(checkX, checkY);\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({ x: checkX, y: checkY })\n            } else {\n                break;\n            }\n        }\n\n        return winningMoves;\n    }\n\n    // sets the state to have a winner if there is one\n    checkForWin = (x, y) => {\n        // to check horizontal moves, we set xPosition and yPosition to current position & xVelocity to 1 and yVelocity to 0\n        // to check vertical moves, we set xPosition and yPosition to current position & xVelocity to 0 and yVelocity to 1\n        // to check forward diagonal moves, we set xPosition and yPosition to current position & xVelocity to 1 and yVelocity to 1\n        // to check reverse diagonal moves, we set xPosition and yPosition to current position & xVelocity to -1 and yVelocity to 1\n        const velocities = [{x: 1, y: 0}, {x:0, y: 1}, {x:-1, y:1}, {x:1 , y:1}];\n\n        // iterating all the directions we have to check\n        for (let index = 0; index < velocities.length; index++) {\n            const element = velocities[index];\n            const winningMoves = this.getWinningMoves(x, y, element.x, element.y);\n            if (winningMoves.length > 3) {\n                this.setState({ winner: this.getPiece(x,y).player, winningMoves })\n            }\n        }\n    }\n\n    // adding a new move into the state and changing the player turn to the next player\n    addMove = (x, y) => {\n        const { playerTurn } = this.state;\n        const nextPlayerTurn = playerTurn === \"red\" ? \"yellow\" : \"red\";\n\n        // making the piece go the lowest row\n        let availableYPosition = null;\n        for (let position = this.state.rows - 1; position >= 0; position--) {\n            if (!this.getPiece(x, position)) {\n                availableYPosition = position;\n                break;\n            }\n        }\n        if (availableYPosition !== null) {\n            this.setState({moves: this.state.moves.concat({x, y: availableYPosition, player: playerTurn}), playerTurn: nextPlayerTurn, count:++this.state.count}, () => this.checkForWin(x, availableYPosition, playerTurn))\n        }\n    }\n\n    // render a square board\n    renderBoard() {\n        // get number of rows and columns from state\n        const { winner } = this.state;\n        const rowViews = [];\n\n        // create rows and columns for the board\n        for (let row = 0; row < this.state.rows; row += 1) {\n            const columnViews = [];\n            for (let column = 0; column < this.state.columns; column += 1) {\n                const piece = this.getPiece(column, row);\n\n                columnViews.push(<div className=\"column\">\n                    {/* circular buttons that players will be pressing */}\n                    <div onClick={() => {this.addMove(column, row,)}} className=\"bu\">\n                        {/* if there is piece associated with that coordinate, change colour red/yellow if not undefined */}\n                        {piece ? <button className=\"bu-selected\" style={{backgroundColor: piece.player}} disabled={true}/>: undefined}\n                    </div>\n                </div>);\n            }\n            rowViews.push(\n                <div className=\"row\">{columnViews}</div>\n            );\n        }\n\n        return (\n            <div className=\"board\">\n                {/* restart game if winner announcement is clicked */}\n                {winner && <div onClick={this.resetBoard} className=\"winner\">{winner} wins! click here to restart</div>}\n                {/* if all 42 buttons are changed into a colour then the game is over */}\n                {this.state.count === 42 && <div onClick={this.resetBoard} className=\"winner\">board is full! click here to restart</div>}\n\n                {rowViews}\n            </div>\n        )\n    }\n\n    // rendering the board\n    render() {\n        return (\n            <>\n                <div className=\"container\">\n                    <header className=\"header\">CONNECT 4 GAME!</header>\n                    <div>\n                        {this.renderBoard()}\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}