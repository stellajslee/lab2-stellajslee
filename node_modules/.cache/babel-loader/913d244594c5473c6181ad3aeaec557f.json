{"ast":null,"code":"var _jsxFileName = \"/Users/stellalee/lab2-stellajslee/src/App.js\";\nimport './App.css';\nimport React, { Component, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows: 6,\n      columns: 7,\n      moves: [],\n      playerTurn: \"red\"\n    };\n\n    this.resetBoard = () => {\n      this.setState({\n        moves: [],\n        winner: null\n      });\n    };\n\n    this.getPiece = (x, y) => {\n      const list = this.state.moves.filter(item => {\n        return item.x === x && item.y === y;\n      });\n      return list[0];\n    };\n\n    this.checkForWin = (x, y, player) => {\n      let winningMoves = [{\n        x,\n        y\n      }]; // check horizontal\n\n      for (let column = x + 1; column < x + 4; column += 1) {\n        const checkPiece = this.getPiece(column, y);\n\n        if (checkPiece && checkPiece.player === player) {\n          winningMoves.push({\n            x: column,\n            y: y\n          });\n        } else {\n          break;\n        }\n      }\n\n      for (let column = x - 1; column > x - 4; column -= 1) {\n        const checkPiece = this.getPiece(column, y);\n\n        if (checkPiece && checkPiece.player === player) {\n          winningMoves.push({\n            x: column,\n            y: y\n          });\n        } else {\n          break;\n        }\n      }\n\n      if (winningMoves.length > 3) {\n        this.setState({\n          winner: player,\n          winningMoves\n        });\n        return true;\n      } // check vertical\n\n\n      winningMoves = [{\n        x,\n        y\n      }];\n\n      for (let row = y + 1; row < y + 4; row += 1) {\n        const checkPiece = this.getPiece(x, row);\n\n        if (checkPiece && checkPiece.player === player) {\n          winningMoves.push({\n            x: x,\n            y: row\n          });\n        } else {\n          break;\n        }\n      }\n\n      for (let row = y - 1; row > y - 4; row -= 1) {\n        const checkPiece = this.getPiece(x, row);\n\n        if (checkPiece && checkPiece.player === player) {\n          winningMoves.push({\n            x: x,\n            y: row\n          });\n        } else {\n          break;\n        }\n      }\n\n      if (winningMoves.length > 3) {\n        this.setState({\n          winner: player,\n          winningMoves\n        });\n        return true;\n      }\n    };\n\n    this.addMove = (x, y) => {\n      const {\n        playerTurn\n      } = this.state;\n      const nextPlayerTurn = playerTurn === \"red\" ? \"yellow\" : \"red\"; // check for a win based on this next move\n      // start from center and check how many pieces are on left, right; four in a row means a win\n\n      this.setState({\n        moves: this.state.moves.concat({\n          x,\n          y,\n          player: playerTurn\n        }),\n        playerTurn: nextPlayerTurn\n      }, () => this.checkForWin(x, y, playerTurn));\n    };\n  }\n\n  // render a square board\n  renderBoard() {\n    // get number of rows and columns from state\n    const {\n      winner\n    } = this.state;\n    const rowViews = []; // create rows and columns for the board\n\n    for (let row = 0; row < this.state.rows; row += 1) {\n      const columnViews = [];\n\n      for (let column = 0; column < this.state.columns; column += 1) {\n        const piece = this.getPiece(column, row);\n        columnViews.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => {\n              this.addMove(column, row);\n            },\n            className: \"bu\",\n            children: piece ? /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bu-selected\",\n              style: {\n                backgroundColor: piece.player\n              },\n              disabled: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 34\n            }, this) : undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 34\n        }, this));\n      }\n\n      rowViews.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: columnViews\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [winner && /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: this.resetBoard,\n        className: \"winner\",\n        children: [winner, \" wins! click here to restart\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 28\n      }, this), rowViews]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.renderBoard()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stellalee/lab2-stellajslee/src/App.js"],"names":["React","Component","useState","App","state","rows","columns","moves","playerTurn","resetBoard","setState","winner","getPiece","x","y","list","filter","item","checkForWin","player","winningMoves","column","checkPiece","push","length","row","addMove","nextPlayerTurn","concat","renderBoard","rowViews","columnViews","piece","backgroundColor","undefined","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, {Component, useState} from \"react\";\n\nclass App extends Component {\n    // states of rows and columns; starting with red\n    state = {\n        rows: 6,\n        columns: 7,\n        moves: [],\n        playerTurn: \"red\"\n    };\n\n    // resetting board to empty\n    resetBoard = () => {\n        this.setState({ moves: [], winner: null});\n    }\n\n    // get moves with particular row and column\n    getPiece = (x, y) => {\n        const list = this.state.moves.filter((item) => {\n            return (item.x === x && item.y === y);\n        });\n\n        return list [0];\n    }\n\n    // sets the state to have a winner if there is one\n    checkForWin = (x, y, player) => {\n        let winningMoves = [{x, y}];\n\n        // check horizontal\n        for (let column = x + 1; column < x + 4; column += 1) {\n            const checkPiece = this.getPiece(column, y);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({x: column, y: y })\n            } else {\n                break;\n            }\n        }\n        for (let column = x - 1; column > x - 4; column -= 1) {\n            const checkPiece = this.getPiece(column, y);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({x: column, y: y })\n            } else {\n                break;\n            }\n        }\n        if (winningMoves.length > 3) {\n            this.setState({winner: player, winningMoves})\n            return true;\n        }\n\n        // check vertical\n        winningMoves = [{x, y}];\n        for (let row = y + 1; row < y + 4; row += 1) {\n            const checkPiece = this.getPiece(x, row);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({x: x, y: row })\n            } else {\n                break;\n            }\n        }\n        for (let row = y - 1; row > y - 4; row -= 1) {\n            const checkPiece = this.getPiece(x, row);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({x: x, y: row })\n            } else {\n                break;\n            }\n        }\n        if (winningMoves.length > 3) {\n            this.setState({winner: player, winningMoves})\n            return true;\n        }\n\n    }\n\n    // adding a new move into the state and changing the player turn to the next player\n    addMove = (x, y) => {\n        const { playerTurn } = this.state;\n        const nextPlayerTurn = playerTurn === \"red\" ? \"yellow\" : \"red\";\n\n        // check for a win based on this next move\n        // start from center and check how many pieces are on left, right; four in a row means a win\n        this.setState({moves: this.state.moves.concat({x, y, player: playerTurn}), playerTurn: nextPlayerTurn}, () => this.checkForWin(x, y, playerTurn))\n    }\n\n    // render a square board\n    renderBoard() {\n        // get number of rows and columns from state\n        const { winner } = this.state;\n        const rowViews = [];\n\n        // create rows and columns for the board\n        for (let row = 0; row < this.state.rows; row += 1) {\n            const columnViews = [];\n            for (let column = 0; column < this.state.columns; column += 1) {\n                const piece = this.getPiece(column, row);\n\n                columnViews.push(<div className=\"column\">\n                    {/* circular buttons that players will be pressing */}\n                    <div onClick={() => {this.addMove(column, row)}} className=\"bu\">\n                        {/* if there is piece associated with that coordinate, change colour red/yellow if not undefined */}\n                        {piece ? <button className=\"bu-selected\" style={{backgroundColor: piece.player}} disabled={true}/> : undefined}\n                    </div>\n                </div>);\n            }\n            rowViews.push(\n                <div className=\"row\">{columnViews}</div>\n            );\n        }\n\n        return (\n            <div className=\"board\">\n                {/* restart game if winner announcement is clicked */}\n                {winner && <div onClick={this.resetBoard} className=\"winner\">{winner} wins! click here to restart</div>}\n\n                {rowViews}\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"container\">\n                    <div>\n                        {this.renderBoard()}\n                    </div>\n                </div>\n            </>\n        )\n    }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}