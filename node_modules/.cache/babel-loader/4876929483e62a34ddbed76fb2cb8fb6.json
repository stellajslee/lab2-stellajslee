{"ast":null,"code":"import _classCallCheck from\"/Users/stellalee/lab2-stellajslee/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/stellalee/lab2-stellajslee/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/stellalee/lab2-stellajslee/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stellalee/lab2-stellajslee/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import'./App.css';import React,{Component}from\"react\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={rows:6,columns:7,moves:[],playerTurn:\"red\",count:0};_this.resetBoard=function(){_this.setState({moves:[],winner:null,count:0});};_this.getPiece=function(x,y){var list=_this.state.moves.filter(function(item){return item.x===x&&item.y===y;});return list[0];};_this.checkForWin=function(x,y,player){var winningMoves=[{x:x,y:y}];// check horizontal\nfor(var column=x+1;column<x+4;column+=1){var checkPiece=_this.getPiece(column,y);if(checkPiece&&checkPiece.player===player){winningMoves.push({x:column,y:y});}else{break;}}for(var _column=x-1;_column>x-4;_column-=1){var _checkPiece=_this.getPiece(_column,y);if(_checkPiece&&_checkPiece.player===player){winningMoves.push({x:_column,y:y});}else{break;}}if(winningMoves.length>3){_this.setState({winner:player,winningMoves:winningMoves});return true;}// check vertical\nwinningMoves=[{x:x,y:y}];for(var row=y+1;row<y+4;row+=1){var _checkPiece2=_this.getPiece(x,row);if(_checkPiece2&&_checkPiece2.player===player){winningMoves.push({x:x,y:row});}else{break;}}for(var _row=y-1;_row>y-4;_row-=1){var _checkPiece3=_this.getPiece(x,_row);if(_checkPiece3&&_checkPiece3.player===player){winningMoves.push({x:x,y:_row});}else{break;}}if(winningMoves.length>3){_this.setState({winner:player,winningMoves:winningMoves});return true;}};_this.addMove=function(x,y){var playerTurn=_this.state.playerTurn;var nextPlayerTurn=playerTurn===\"red\"?\"yellow\":\"red\";// check for a win based on this next move\n// start from center and check how many pieces are on left, right; four in a row means a win\n_this.setState({moves:_this.state.moves.concat({x:x,y:y,player:playerTurn}),playerTurn:nextPlayerTurn,count:++_this.state.count},function(){return _this.checkForWin(x,y,playerTurn);});};return _this;}_createClass(App,[{key:\"renderBoard\",value:// render a square board\nfunction renderBoard(){var _this2=this;// get number of rows and columns from state\nvar winner=this.state.winner;var rowViews=[];// create rows and columns for the board\nvar _loop=function _loop(row){var columnViews=[];var _loop2=function _loop2(column){var piece=_this2.getPiece(column,row);columnViews.push(/*#__PURE__*/_jsx(\"div\",{className:\"column\",children:/*#__PURE__*/_jsx(\"div\",{onClick:function onClick(){_this2.addMove(column,row);},className:\"bu\",children:piece?/*#__PURE__*/_jsx(\"button\",{className:\"bu-selected\",style:{backgroundColor:piece.player},disabled:true}):undefined})}));};for(var column=0;column<_this2.state.columns;column+=1){_loop2(column);}rowViews.push(/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:columnViews}));};for(var row=0;row<this.state.rows;row+=1){_loop(row);}return/*#__PURE__*/_jsxs(\"div\",{className:\"board\",children:[winner&&/*#__PURE__*/_jsxs(\"div\",{onClick:this.resetBoard,className:\"winner\",children:[winner,\" wins! click here to restart\"]}),this.state.count===42&&/*#__PURE__*/_jsx(\"div\",{onClick:this.resetBoard,className:\"winner\",children:\"board is full! click here to restart\"}),rowViews]});}// rendering the board\n},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"header\",children:\"CONNECT 4 GAME!\"}),/*#__PURE__*/_jsx(\"div\",{children:this.renderBoard()})]})});}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/stellalee/lab2-stellajslee/src/App.js"],"names":["React","Component","App","state","rows","columns","moves","playerTurn","count","resetBoard","setState","winner","getPiece","x","y","list","filter","item","checkForWin","player","winningMoves","column","checkPiece","push","length","row","addMove","nextPlayerTurn","concat","rowViews","columnViews","piece","backgroundColor","undefined","renderBoard"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n    // states of rows and columns; starting with red\n    state = {\n        rows: 6,\n        columns: 7,\n        moves: [],\n        playerTurn: \"red\",\n        count: 0\n    };\n\n    // resetting board to empty\n    resetBoard = () => {\n        this.setState({ moves: [], winner: null, count: 0});\n    }\n\n    // get moves with particular row and column\n    getPiece = (x, y) => {\n        const list = this.state.moves.filter((item) => {\n            return (item.x === x && item.y === y);\n        });\n\n        return list [0];\n    }\n\n    // sets the state to have a winner if there is one\n    checkForWin = (x, y, player) => {\n\n        let winningMoves = [{x, y}];\n\n        // check horizontal\n        for (let column = x + 1; column < x + 4; column += 1) {\n            const checkPiece = this.getPiece(column, y);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({ x: column, y: y })\n            } else {\n                break;\n            }\n        }\n        for (let column = x - 1; column > x - 4; column -= 1) {\n            const checkPiece = this.getPiece(column, y);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({ x: column, y: y })\n            } else {\n                break;\n            }\n        }\n        if (winningMoves.length > 3) {\n            this.setState({winner: player, winningMoves})\n            return true;\n        }\n\n        // check vertical\n        winningMoves = [{x, y}];\n        for (let row = y + 1; row < y + 4; row += 1) {\n            const checkPiece = this.getPiece(x, row);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({x: x, y: row })\n            } else {\n                break;\n            }\n        }\n        for (let row = y - 1; row > y - 4; row -= 1) {\n            const checkPiece = this.getPiece(x, row);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({x: x, y: row })\n            } else {\n                break;\n            }\n        }\n        if (winningMoves.length > 3) {\n            this.setState({winner: player, winningMoves})\n            return true;\n        }\n    }\n\n    // adding a new move into the state and changing the player turn to the next player\n    addMove = (x, y) => {\n        const { playerTurn } = this.state;\n        const nextPlayerTurn = playerTurn === \"red\" ? \"yellow\" : \"red\";\n\n        // check for a win based on this next move\n        // start from center and check how many pieces are on left, right; four in a row means a win\n        this.setState({moves: this.state.moves.concat({x, y, player: playerTurn}), playerTurn: nextPlayerTurn, count:++this.state.count}, () => this.checkForWin(x, y, playerTurn))\n    }\n\n    // render a square board\n    renderBoard() {\n        // get number of rows and columns from state\n        const { winner } = this.state;\n        const rowViews = [];\n\n        // create rows and columns for the board\n        for (let row = 0; row < this.state.rows; row += 1) {\n            const columnViews = [];\n            for (let column = 0; column < this.state.columns; column += 1) {\n                const piece = this.getPiece(column, row);\n\n                columnViews.push(<div className=\"column\">\n                    {/* circular buttons that players will be pressing */}\n                    <div onClick={() => {this.addMove(column, row,)}} className=\"bu\">\n                        {/* if there is piece associated with that coordinate, change colour red/yellow if not undefined */}\n                        {piece ? <button className=\"bu-selected\" style={{backgroundColor: piece.player}} disabled={true}/>: undefined}\n                    </div>\n                </div>);\n            }\n            rowViews.push(\n                <div className=\"row\">{columnViews}</div>\n            );\n        }\n\n        return (\n            <div className=\"board\">\n                {/* restart game if winner announcement is clicked */}\n                {winner && <div onClick={this.resetBoard} className=\"winner\">{winner} wins! click here to restart</div>}\n                {/* if all 42 buttons are changed into a colour then the game is over */}\n                {this.state.count === 42 && <div onClick={this.resetBoard} className=\"winner\">board is full! click here to restart</div>}\n\n                {rowViews}\n            </div>\n        )\n    }\n\n    // rendering the board\n    render() {\n        return (\n            <>\n                <div className=\"container\">\n                    <header className=\"header\">CONNECT 4 GAME!</header>\n                    <div>\n                        {this.renderBoard()}\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}