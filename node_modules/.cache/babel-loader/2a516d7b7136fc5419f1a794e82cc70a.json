{"ast":null,"code":"var _jsxFileName = \"/Users/stellalee/lab2-stellajslee/src/App.js\";\nimport './App.css';\nimport React, { Component, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows: 6,\n      columns: 7,\n      moves: [],\n      playerTurn: \"red\"\n    };\n\n    this.resetBoard = () => {\n      this.setState({\n        moves: []\n      });\n    };\n\n    this.getPiece = (x, y) => {\n      const list = this.state.moves.filter(item => {\n        return item.x === x && item.y === y;\n      });\n      return list[0];\n    };\n\n    this.checkForWin = (x, y, player) => {\n      let xInARow = 1;\n\n      for (let column = x + 1; column < x + 4; column += 1) {\n        const checkPiece = this.getPiece(column, y);\n\n        if (checkPiece && checkPiece.player === player) {\n          xInARow += 1;\n        } else {\n          break;\n        }\n      }\n    };\n\n    this.addMove = (x, y) => {\n      const {\n        playerTurn\n      } = this.state;\n      const nextPlayerTurn = playerTurn === \"red\" ? \"yellow\" : \"red\"; // check for a win based on this next move\n      // start from center and check how many pieces are on left, right; four in a row means a win\n\n      this.setState({\n        moves: this.state.moves.concat({\n          x,\n          y,\n          player: playerTurn\n        }),\n        playerTurn: nextPlayerTurn\n      }, this.checkForWin(x, y, playerTurn));\n    };\n  }\n\n  // render a square board\n  renderBoard() {\n    // get number of rows and columns from state\n    const {\n      rows,\n      columns\n    } = this.state;\n    const rowViews = []; // create rows and columns for the board\n\n    for (let row = 0; row < this.state.rows; row += 1) {\n      const columnViews = [];\n\n      for (let column = 0; column < this.state.columns; column += 1) {\n        const piece = this.getPiece(column, row);\n        columnViews.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => {\n              this.addMove(column, row);\n            },\n            className: \"bu\",\n            children: piece ? /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bu-selected\",\n              style: {\n                backgroundColor: piece.player\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 34\n            }, this) : undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 34\n        }, this));\n      }\n\n      rowViews.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: columnViews\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: rowViews\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.renderBoard()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stellalee/lab2-stellajslee/src/App.js"],"names":["React","Component","useState","App","state","rows","columns","moves","playerTurn","resetBoard","setState","getPiece","x","y","list","filter","item","checkForWin","player","xInARow","column","checkPiece","addMove","nextPlayerTurn","concat","renderBoard","rowViews","row","columnViews","piece","push","backgroundColor","undefined","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, {Component, useState} from \"react\";\n\nclass App extends Component {\n    // states of rows and columns\n    state = {\n        rows: 6,\n        columns: 7,\n        moves: [],\n        playerTurn: \"red\"\n    };\n\n    resetBoard = () => {\n        this.setState({ moves: [] });\n    }\n\n    // get moves with particular row and column\n    getPiece = (x, y) => {\n        const list = this.state.moves.filter((item) => {\n            return (item.x === x && item.y === y);\n        });\n\n        return list [0];\n    }\n\n    // sets the state to have a winner if there is one\n    checkForWin = (x, y, player) => {\n        let xInARow = 1;\n        for (let column = x + 1; column < x + 4; column += 1) {\n            const checkPiece = this.getPiece(column, y);\n            if (checkPiece && checkPiece.player === player) {\n                xInARow += 1;\n            } else {\n                break;\n            }\n        }\n    }\n\n    // adding a new move into the state and changing the player turn to the next player\n    addMove = (x, y) => {\n        const { playerTurn } = this.state;\n        const nextPlayerTurn = playerTurn === \"red\" ? \"yellow\" : \"red\";\n\n        // check for a win based on this next move\n        // start from center and check how many pieces are on left, right; four in a row means a win\n        this.setState({moves: this.state.moves.concat({x, y, player: playerTurn}), playerTurn: nextPlayerTurn}, this.checkForWin(x, y, playerTurn))\n    }\n\n    // render a square board\n    renderBoard() {\n        // get number of rows and columns from state\n        const { rows, columns } = this.state;\n        const rowViews = [];\n\n        // create rows and columns for the board\n        for (let row = 0; row < this.state.rows; row += 1) {\n            const columnViews = [];\n            for (let column = 0; column < this.state.columns; column += 1) {\n                const piece = this.getPiece(column, row);\n\n                columnViews.push(<div className=\"column\">\n                    {/* circular buttons that players will be pressing */}\n                    <div onClick={() => {this.addMove(column, row)}} className=\"bu\">\n                        {/* if there is piece associated with that coordinate, change colour red/yellow if not undefined */}\n                        {piece ? <button className=\"bu-selected\" style={{backgroundColor: piece.player}}/> : undefined}\n                    </div>\n                </div>);\n            }\n            rowViews.push(\n                <div className=\"row\">{columnViews}</div>\n            );\n        }\n\n        return (\n            <div className=\"board\">\n                {rowViews}\n            </div>\n        )\n    }\n\n    render() {\n\n        return (\n            <>\n                <div className=\"container\">\n                    <div>\n                        {this.renderBoard()}\n                    </div>\n                </div>\n            </>\n        )\n    }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}