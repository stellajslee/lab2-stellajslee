[{"/Users/stellalee/lab2-stellajslee/src/index.js":"1","/Users/stellalee/lab2-stellajslee/src/App.js":"2"},{"size":218,"mtime":1634674500701,"results":"3","hashOfConfig":"4"},{"size":4889,"mtime":1634673562217,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1espbnc",{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"10"},"/Users/stellalee/lab2-stellajslee/src/index.js",[],"/Users/stellalee/lab2-stellajslee/src/App.js",["11","12"],"import './App.css';\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n    // states of rows and columns; starting with red\n    state = {\n        rows: 6,\n        columns: 7,\n        moves: [],\n        playerTurn: \"red\",\n        count: 0\n    };\n\n    // resetting board to empty\n    resetBoard = () => {\n        this.setState({ moves: [], winner: null, count: 0});\n    }\n\n    // get moves with particular row and column\n    getPiece = (x, y) => {\n        const list = this.state.moves.filter((item) => {\n            return (item.x === x && item.y === y);\n        });\n\n        return list [0];\n    }\n\n    // sets the state to have a winner if there is one\n    checkForWin = (x, y, player) => {\n\n        let winningMoves = [{x, y}];\n\n        // check horizontal\n        for (let column = x + 1; column < x + 4; column += 1) {\n            const checkPiece = this.getPiece(column, y);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({ x: column, y: y })\n            } else {\n                break;\n            }\n        }\n        for (let column = x - 1; column > x - 4; column -= 1) {\n            const checkPiece = this.getPiece(column, y);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({ x: column, y: y })\n            } else {\n                break;\n            }\n        }\n        if (winningMoves.length > 3) {\n            this.setState({winner: player, winningMoves})\n            return true;\n        }\n\n        // check vertical\n        winningMoves = [{x, y}];\n        for (let row = y + 1; row < y + 4; row += 1) {\n            const checkPiece = this.getPiece(x, row);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({x: x, y: row })\n            } else {\n                break;\n            }\n        }\n        for (let row = y - 1; row > y - 4; row -= 1) {\n            const checkPiece = this.getPiece(x, row);\n\n            if (checkPiece && checkPiece.player === player) {\n                winningMoves.push({x: x, y: row })\n            } else {\n                break;\n            }\n        }\n        if (winningMoves.length > 3) {\n            this.setState({winner: player, winningMoves})\n            return true;\n        }\n    }\n\n    // adding a new move into the state and changing the player turn to the next player\n    addMove = (x, y) => {\n        const { playerTurn } = this.state;\n        const nextPlayerTurn = playerTurn === \"red\" ? \"yellow\" : \"red\";\n\n        // check for a win based on this next move\n        // start from center and check how many pieces are on left, right; four in a row means a win\n        this.setState({moves: this.state.moves.concat({x, y, player: playerTurn}), playerTurn: nextPlayerTurn, count:++this.state.count}, () => this.checkForWin(x, y, playerTurn))\n    }\n\n    // render a square board\n    renderBoard() {\n        // get number of rows and columns from state\n        const { winner } = this.state;\n        const rowViews = [];\n\n        // create rows and columns for the board\n        for (let row = 0; row < this.state.rows; row += 1) {\n            const columnViews = [];\n            for (let column = 0; column < this.state.columns; column += 1) {\n                const piece = this.getPiece(column, row);\n\n                columnViews.push(<div className=\"column\">\n                    {/* circular buttons that players will be pressing */}\n                    <div onClick={() => {this.addMove(column, row,)}} className=\"bu\">\n                        {/* if there is piece associated with that coordinate, change colour red/yellow if not undefined */}\n                        {piece ? <button className=\"bu-selected\" style={{backgroundColor: piece.player}} disabled={true}/>: undefined}\n                    </div>\n                </div>);\n            }\n            rowViews.push(\n                <div className=\"row\">{columnViews}</div>\n            );\n        }\n\n        return (\n            <div className=\"board\">\n                {/* restart game if winner announcement is clicked */}\n                {winner && <div onClick={this.resetBoard} className=\"winner\">{winner} wins! click here to restart</div>}\n                {/* if all 42 buttons are changed into a colour then the game is over */}\n                {this.state.count === 42 && <div onClick={this.resetBoard} className=\"winner\">board is full! click here to restart</div>}\n\n                {rowViews}\n            </div>\n        )\n    }\n\n    // rendering the board\n    render() {\n        return (\n            <>\n                <div className=\"container\">\n                    <header className=\"header\">CONNECT 4 GAME!</header>\n                    <div>\n                        {this.renderBoard()}\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default App;\n\n",{"ruleId":"13","severity":1,"message":"14","line":25,"column":16,"nodeType":"15","messageId":"16","endLine":25,"endColumn":24,"fix":"17"},{"ruleId":"18","severity":1,"message":"19","line":90,"column":120,"nodeType":"15","messageId":"20","endLine":90,"endColumn":130},"no-whitespace-before-property","Unexpected whitespace before property 0.","MemberExpression","unexpectedWhitespace",{"range":"21","text":"22"},"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","noDirectMutation",[608,609],""]